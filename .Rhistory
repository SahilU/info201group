view
View(flights)
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
select(flights, month == 1)
select(flights, year == "2013")
select(flights, "year" == "2013")
select(flights, year)
pscl
View(pscl)
library(pscl)
view(pscl)
library(dplyr)
View(pscl)
View(pscl::absentee)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
? spread
library(tidyselect)
? spread
install.packages("tidyverse")
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("tidyr")
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
flights %>%
group_by(airports) %>%
summarize(value = mean(avg_dly))
View(flights)
View(flights::airports)
View(flights)
flights::airports
nycflights13::airports
nycflights13::flights
temp <- flights %>%
group_by(dest) %>%
summarize(value = mean(arr_delay))
temp
max(temp\)
max(temp, na.rm = TRUE)
max(temp$value, na.rm = TRUE)
temp[temp$value == 6.5, dest]
temp[temp$value == 6.5, "dest"]
temp[temp$value == 6.5 & !is.na(temp$dest),]
temp[temp$value > 7 & !is.na(temp$dest),]
nycflights13::flights
temp
temp <- flights %>%
group_by(dest) %>%
summarize(value = mean(arr_delay))
library(dplyr)
library(tidyr)
temp <- flights %>%
+ group_by(dest) %>%
+ summarize(value = mean(arr_delay))
library(nycflights13)
temp <- flights %>%
+ group_by(dest) %>%
+ summarize(value = mean(arr_delay))
temp <- flights %>%
+ group_by("dest") %>%
+ summarize(value = mean(arr_delay))
temp <- flights %>%
+ group_by(dest) %>%
+ summarize(value = mean(arr_delay))
nycflights13::airports
flights[flights$dest == "EWR"]
flights[flights$dest == "EWR", ]
select(flights, dest == "EWR")
flights
view flights
View(flights)
api_key <- 'vsm9EcPvFJyKsuBgP7sF42pSJiWaGgeoYVpZPdUP'
library("dplyr")
library("nttr")
library("jsonlite")
library("plotly")
library("dplyr")
library("nttr")
library("jsonlite")
library("plotly")
library(httr)
response <- GET ("https://api.propublica.org/congress/v1/116/house/members.json",
add_headers("X-API-Key" = propublica_key))
source("propublica_key.R")
propublica_key <- 'vsm9EcPvFJyKsuBgP7sF42pSJiWaGgeoYVpZPdUP'
source("propublica_key.R")
setwd("C:/Users/siddh/Desktop/Info201/a7--siddharthbe")
source("propublica_key.R")
response <- GET ("https://api.propublica.org/congress/v1/116/house/members.json",
add_headers("X-API-Key" = propublica_key))
View(response)
View(response)
text <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(text)
View(data)
df <- as.data.frame(data$results$members)
View(df)
data <- fromJSON(text)
members_by_state <- function(chamber = "house", state_name = "WA"){
base_uri <- "https://api.propublica.org/congress/v1/members/"
ending <- "/current.json"
response <- GET (paste0(base_uri, chamber, "/", state_name, ending),
add_headers("X-API-Key" = propublica_key))
text <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(text)
}
View(members_by_state())
members_by_state <- function(chamber = "house", state_name = "WA"){
base_uri <- "https://api.propublica.org/congress/v1/members/"
ending <- "/current.json"
response <- GET (paste0(base_uri, chamber, "/", state_name, ending),
add_headers("X-API-Key" = propublica_key))
text <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(text)
members_by_state_df <- as.data.frame(data$results)
}
View(members_by_state())
reps_info <- function(memberId){
base_uri <- "https://api.propublica.org/congress/v1/members/"
ending <- ".json"
response <- GET (paste0(base_uri, memberId, ending),
add_headers("X-API-Key" = propublica_key))
text <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(text)
reps_info_df <- as.data.frame(data$results)
}
View(reps_info("D000617"))
install.packages("eeptools")
library(eeptools)
reps_age <- function(memberId){
df <- reps_info(memberId)
x <- as.Date(c(Sys.Date(), as.Date(df$date_of_birth)))
floor(age_calc(x[1],x[2], units = "years"))
}
View(reps_age("D000617"))
reps_age("D000617")
reps_age("D000617")
reps_age <- function(memberId){
df <- reps_info(memberId)
floor(as.numeric(difftime(as.date(Sys.Date()),as.Date(df$date_of_birth), units = "years")))
}
reps_age("D000617")
reps_age <- function(memberId){
df <- reps_info(memberId)
floor(as.numeric(difftime(as.Date(Sys.Date()),as.Date(df$date_of_birth), units = "years")))
}
reps_age("D000617")
reps_age <- function(memberId){
df <- reps_info(memberId)
floor(as.numeric(difftime(as.Date(Sys.Date()),as.Date(df$date_of_birth), units = "days")) / 365)
}
reps_age("D000617")
summary_table <- members_by_state() %>%
group_by(gender, party) %>%
summarise(count = n())
summary_table
summary_table <- function(state_name){
members_by_state(state_name) %>%
group_by(gender, party) %>%
summarise(count = n())
}
View(summary_table())
summary_table <- function(state_name = "WA"){
members_by_state(state_name) %>%
group_by(gender, party) %>%
summarise(count = n())
}
View(summary_table())
summary_table <- function(state_name = "WA"){
members_by_state(state_name) %>%
group_by(gender, party) %>%
summarise(count = n())
}
View(summary_table())
summary_table <- function(state_name = "WA"){
members_by_state(state_name) %>%
group_by(gender, party) %>%
summarise(count = n())
}
View(summary_table())
members_by_state <- function(state_name = "WA", chamber = "house"){
base_uri <- "https://api.propublica.org/congress/v1/members/"
ending <- "/current.json"
response <- GET (paste0(base_uri, chamber, "/", state_name, ending),
add_headers("X-API-Key" = propublica_key))
text <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(text)
members_by_state_df <- as.data.frame(data$results)
}
summary_table <- function(state_name = "WA"){
members_by_state(state_name) %>%
group_by(gender, party) %>%
summarise(count = n())
}
View(summary_table())
library("dplyr")
library("shiny")
library("plotly")
source("propublica.R")
members_by_state()
View(members_by_state())
df <- members_by_state() %>%
select(name, party, reps_age(id), twitter_id, facebook_account)
df <- members_by_state() %>%
mutate(age = reps_age(id)) %>%
select(name, party, id, twitter_id, facebook_account)
select(name, party, age, twitter_id, facebook_account)
df <- members_by_state() %>%
mutate(age = lapply(id, reps_age)) %>%
select(name, party, age, twitter_id, facebook_account)
View(df)
summary_table <- function(state_name = "WA"){
summary_table <- members_by_state(state_name) %>%
group_by(gender, party) %>%
summarise(count = n())
}
summary_df <- function(state_name){
summary_df <- members_by_state(state_name) %>%
mutate(age = lapply(id, reps_age)) %>%
select(name, party, age, twitter_id, facebook_account)
}
View(summary_df())
summary_df <- function(state_name = "WA"){
summary_df <- members_by_state(state_name) %>%
mutate(age = lapply(id, reps_age)) %>%
select(name, party, age, twitter_id, facebook_account)
}
View(summary_df())
ui <- navbarPage(
"US house of representatives"
)
output$table <- renderDataTable({summary_df(input$select)})
runApp()
states <- unique(members_by_house_df$state)
library("shiny")
library("plotly")
source("propublica.R")
overview_panel <- tabPanel("somename",
)
query_panel <- tabPanel("somename",
sidebarLayout(
sidebarPanel(
selectInput("select",
label = h3("somename"),
choices = states,
selected = 1,
)
),
mainPanel(
dataTableOutput("table")
)
)
)
summary_panel <- tabPanel("somename",
sidebarLayout(
sidebarPanel(
),
mainPanel(
)
)
)
ui <- navbarPage(
"US house of representatives",
overview_panel,
query_panel,
summary_panel
)
library("dplyr")
library("shiny")
library("plotly")
source("propublica.R")
summary_df <- function(state_name = "WA"){
summary_df <- members_by_state(state_name) %>%
mutate(age = lapply(id, reps_age)) %>%
select(name, party, age, twitter_id, facebook_account)
}
server <- function(input, output){
output$table <- renderDataTable({summary_df(input$select)})
}
runApp()
View(summary_table())
gender_bar_chart <- function(state_name = "WA"){
df <- summary_table(state_name)
gender_df <- df %>%
group_by(gender) %>%
summarise(sum = sum(count))
p <- plot_ly(gender_df,
x = ~sum,
y = ~gender,
type = 'bar', orientation = 'h')
}
gender_bar_chart()
gender_bar_chart <- function(state_name = "WA"){
df <- summary_table(state_name)
gender_df <- df %>%
group_by(gender) %>%
summarise(sum = sum(count))
p <- plot_ly(gender_df,
x = ~sum,
y = ~gender,
type = 'bar', orientation = 'h')
return(p)
}
gender_bar_chart()
summary_panel <- tabPanel("somename",
sidebarLayout(
sidebarPanel(
selectInput("select2",
label = h3("somename"),
choices = states,
selected = 1,
)
),
mainPanel(
potlyOutput("gender_plot")
)
)
)
summary_panel <- tabPanel("somename",
sidebarLayout(
sidebarPanel(
selectInput("select2",
label = h3("somename"),
choices = states,
selected = 1,
)
),
mainPanel(
plotlyOutput("gender_plot")
)
)
)
runApp()
summary_panel <- tabPanel("somename",
sidebarLayout(
sidebarPanel(
selectInput("select2",
label = h3("somename"),
choices = states,
selected = 1,
)
),
mainPanel(
plotlyOutput("gender_plot"),
plotlyOutput("party_plot")
)
)
)
runApp()
View(members_by_house_df)
paste_no <- function(...,sep=", ") {
L <- list(...)
L <- lapply(L,function(x) {x[is.na(x)] <- ""; x})
ret <-gsub(paste0("(^",sep,"|",sep,"$)"),"",
gsub(paste0(sep,sep),sep,
do.call(paste,c(L,list(sep=sep)))))
is.na(ret) <- ret==""
ret
}
all_names <- select(members_by_house_df, first_name, middle_name, last_name,
url, phone, office, votesmart_id) %>%
mutate(full_name = paste_no(first_name, middle_name, last_name)) %>%
select(full_name, url, phone, office, votesmart_id)
extra_info_df <- function(rep_name){
filter(all_names, rep_name)
}
runApp()
query_panel <- tabPanel("somename",
sidebarLayout(
sidebarPanel(
selectInput("select",
label = h3("somename"),
choices = states,
selected = 1,
),
selectInput("select3",
label = h3("somename"),
choices = all_names,
selected = 1,
)
),
mainPanel(
dataTableOutput("table"),
tableOutput("table2")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/siddh/Desktop/Info201/info201group')
runApp('C:/Users/siddh/Desktop/Info201/a7--siddharthbe')
runApp('C:/Users/siddh/Desktop/Info201/a7--siddharthbe')
overview_panel <- tabPanel("About",
p("The project is intended to highlight insights into Congress through different kinds of visualizations.
In this project we used data to make it easier for people to see correlations. We used the ProPublica
Congress API to find the data needed for our visualizations. We will use a table with the list of
all members in Congress. We will show graphs that compare the gender of members with their number and
also what party they belong to."),
h3("Statewise Members"),
p("This page displays the members' name, party, age, twitter_id and facebook_account for the selected
state. It makes it easier for user to browse member names by state as they just have to select the state
name from the dropdown menu. The second dropdown menu lets the user choose a name and then displays the full
name, url, phone, office address and votesmart_id."),
h3("Demographics of parties"),
p("This page displays horizontal bar graphs for representing how many female and male members are there and also
how many democrats and republicans are there in the state. The user gets to choose the state they want to see
the graph for."),
h3("Data link"),
p(href = "https://projects.propublica.org/api-docs/congress-api/#overview")
runApp('C:/Users/siddh/Desktop/Info201/a7--siddharthbe')
setwd("C:/Users/siddh/Desktop/Info201/a7--siddharthbe")
runApp('C:/Users/siddh/Desktop/Info201/a7--siddharthbe')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='info201group',
token='82D20F16A19E5A6CCFA417596E947887',
secret='M0Uns88B2jXyQx9MK7+4fEPvcT/VIT5FSFp417Wc')
deployApp()
runApp('C:/Users/siddh/Desktop/Info201/info201group')
runApp('C:/Users/siddh/Desktop/Info201/info201group')
rsconnect::setAccountInfo(name='info201group',
token='1DC61295C61C785AFB85080D2A8023E7',
secret='n2n+zfLvpRsESPTbd8LFUmcj3pZ7bADspa9bsejQ')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='info201group',
token='1DC61295C61C785AFB85080D2A8023E7',
secret='n2n+zfLvpRsESPTbd8LFUmcj3pZ7bADspa9bsejQ')
deployApp()
rsconnect::setAccountInfo(name='info201group',
token='1DC61295C61C785AFB85080D2A8023E7',
secret='n2n+zfLvpRsESPTbd8LFUmcj3pZ7bADspa9bsejQ')
deployApp()
rsconnect::setAccountInfo(name='info201group',
token='1DC61295C61C785AFB85080D2A8023E7',
secret='n2n+zfLvpRsESPTbd8LFUmcj3pZ7bADspa9bsejQ')
deployApp()
rsconnect::setAccountInfo(name='info201group',
token='D29E9D88A700881144FB368DAD649810',
secret='Aah4CVchUclt0nKFEd8kfyCqT6DS4SAoVjrqVv79')
deployApp()
setwd("C:/Users/siddh/Desktop/Info201/info201group")
rsconnect::setAccountInfo(name='info201group',
token='D29E9D88A700881144FB368DAD649810',
secret='Aah4CVchUclt0nKFEd8kfyCqT6DS4SAoVjrqVv79')
deployApp()
setwd("C:/Users/siddh/Desktop/Info201/info201group")
rsconnect::setAccountInfo(name='info201group',
token='D29E9D88A700881144FB368DAD649810',
secret='Aah4CVchUclt0nKFEd8kfyCqT6DS4SAoVjrqVv79')
deployApp()
rsconnect::setAccountInfo(name='info201group',
token='14C288584FD5C90D1129F457B6CE4ABE',
secret='l3KgEb/OueYEKXMO4c1u2M/VHm6ywDFR3MbqxGBk')
deployApp()
rsconnect::setAccountInfo(name='info201group',
token='14C288584FD5C90D1129F457B6CE4ABE',
secret='l3KgEb/OueYEKXMO4c1u2M/VHm6ywDFR3MbqxGBk')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='info201group',
token='14C288584FD5C90D1129F457B6CE4ABE',
secret='l3KgEb/OueYEKXMO4c1u2M/VHm6ywDFR3MbqxGBk')
deployApp()
