twenty_seven <- cube(3)
cube <- function(num) {
return (num * num * num)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
inches_to_cm(5)
inches_to_cm <- function(num) {
return(num * 2.54)
}
inches_to_cm(5)
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 69
cm_tall <- inches_to_cm(inches_tall)
cm_tall
has_more_zs <- function(str1, str2) {
count1 <- str_count(tolower(str1), "z")
count2 <- str_count(tolower(str2), "z")
if (count1 == 0 & count2 == 0) {
return("Neither string contains the letter z.")
} else if (count1 == count2) {
return("The strings have the same number of Zs.")
} else if (count1 > count2) {
return(paste(str1, "has more occurrences of the letter z."))
} else {
return(paste(str2, "has more occurrences of the letter z."))
}
}
has_more_zs("xyzzz", "zz")
has_more_zs <- function(str1, str2) {
count1 <- str_count(tolower(str1), "z")
count2 <- str_count(tolower(str2), "z")
if (count1 == 0 & count2 == 0) {
return("Neither string contains the letter z.")
} else if (count1 == count2) {
return("The strings have the same number of Zs.")
} else if (count1 > count2) {
return(str1)
} else {
return(str2)
}
}
has_more_zs("xyzzz", "zz")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs("zebraz", "zap")
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zebraz", "zap")
more_zs <- has_more_zs("zebraz", "zap")
more_zs
remove_digits <- function(vec_str){
x <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(input){
digits <- "0123456789"
gsub("[0-9]", replacement = "", digits = input)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(vec_str){
digits <- "0123456789"
gsub("[0-9]", replacement = "", digits = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(vec_str){
x <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(vec_str){
digits <- "0123456789"
gsub("[0-9]", replacement = "", digits = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(vec_str){
digits <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Avengers", "IT", "Black Panther", "SuperBad", "Avatar")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies[1:6], "is a great movie!")
excited
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
movies
movies
movies <- c("Harry Potter", "Avengers", "IT", "Black Panther", "SuperBad", "Avatar")
without_four <- movies[-4]
without_four
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- 4:400 / 2
mutliples_of_4
mutliples_of_4
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- 4:400 / 4
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:400) / 4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:400) / 4
multiples_of_4
multiples_of_4 <- (4:400)
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:400) / 0.25
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:4:400)
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:4:4:400)
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:4:400)
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:4:400) %% 4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:4:400) %% 4
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:4:400) %% 4
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- (4:400) %% 4
multiples_of_4
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- mod(4:400)
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- 4:400 %% 4
multiples_of_4
values = 4:400
multiples_of_4 <- values[(values %% 4) == 0]
multiples_of_4
values <- 4:400
multiples_of_4 <- values[(values %% 4) == 0]
multiples_of_4
multiples_of_8 <- multiples_of_4[(multiples_of_4 %% 8) == 0]
multiples_of_8
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
numbers_len
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
numbers_mean
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- media(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
numbers_median
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
lower_numbers
higher_numbers <- numbers[numbers > numbers_mean]
higher_numbers
sumary_info <- list (
length <- numbers_len,
mean <- numbers_mean,
median <- numbers_median
)
summarize_vector <- function(vec_nums) {
mean <- mean(vec_nums)
median <- median(vec_nums)
length <- length(vec_nums)
return(paste(mean, median, length))
}
summarize_vector(numbers)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
summary_1_to_100
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = "")
return(introduction)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro
ccasual_intro
casual_intro
inches_to_cm <- function(num_inches) {
return(num_inches * 2.54)
}
inches_tall <- 69
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall
remove_digits <- function(vec_str){
digits <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(vec_str){
digits <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
remove_digits <- function(vec_str){
#digits <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
remove_digits <- function(vec_str){
#digits <- "0123456789"
gsub("[0-9]", replacement = "", x = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(vec_str){
gsub("[0-9]", replacement = "", x = vec_str)
}
remove_digits <- function(vec_str){
gsub("[0-9]", replacement = "", x = vec_str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
movies <- c("Harry Potter", "Avengers", "IT", "Black Panther", "Superbad", "Avatar")
courses <- data.frame(
number = c(
'INFO 102', 'INFO 200', 'INFO 201', 'INFO 300'
),
topic = c(
'Gender and IT', 'Intellectual Foundations',
'Technical Foundations', 'Research Methods'
)
)
courses
courses[3]
our_class <- courses[3]
our_class <- courses[filter(3)]
our_class <- courses[courses$number == 'INFO 201']
courses <- data.frame(
number = c(
'INFO 102', 'INFO 200', 'INFO 201', 'INFO 300'
),
topic = c(
'Gender and IT', 'Intellectual Foundations',
'Technical Foundations', 'Research Methods'
)
)
courses
our_class <- courses[courses$number == 'INFO 201']
[courses$number == 'INFO 201', ]
courses <- data.frame(
number = c(
'INFO 102', 'INFO 200', 'INFO 201', 'INFO 300'
),
topic = c(
'Gender and IT', 'Intellectual Foundations',
'Technical Foundations', 'Research Methods'
)
)
courses
our_class <- courses[courses$number == 'INFO 201', ]
our_class
our_class <- courses[courses$number == 'INFO 201' ]
our_class
our_class <- courses[courses$number == 'INFO 201', ]
our_class
our_class <- courses[courses$number == 'INFO 201', courses$number == 'INFO 200', ]
our_class
our_class <- courses[courses$number == 'INFO 200', ]
our_class
View(our_class)
our_class <- courses[2:3, ]
our_class
courses[2:3, ]
other_classes <- courses[courses$number == 'INFO 201' |
courses$number == 'INFO 200']
other_classes
other_classes <- courses[courses$number == 'INFO 201' |
courses$number == 'INFO 200']
other_classes <- courses[courses$number == 'INFO 201' |
courses$number == 'INFO 200', ]
other_classes
install.packages(c("devtools", "fueleconomy"))
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manu_1997 <- manu_1997[order(manu_1997$hwy),]
# Filter the data set for vehicles manufactured in 1997
manu_1997 <- vehicles[vehicles$year == 1997, ]
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
manu_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manu_1997 <- manu_1997[order(manu_1997$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
manu_1997
install.packages("dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
best_model <- select(best_acura, model)
acuras <- filter(vehicles, make == "Acura", year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura, model)
acuras
best_acura
best_model
best_model <- select(
filter(
filter(vehicles, make == "Acura", year == 2015), hwy == max(hwy)
), model
)
best_model
install.packages("nycflights13")
library(nycflights13)
flights <- mutate(flights, gain_in_air == arr_delay - dep_delay)
library(nycflights13)
flights <- mutate(flights, gain_in_air == arr_delay - dep_delay)
library(dplyr)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
install.packages("pscl")
library(pscl)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
View(presidentialElections)
View(nycflights13)
View(flights)
flights
library(dplyr)
nrow(flights)
library(nycflights13)
library(dplyr)
nrow(flights)
colnames(flights)
View(flights)
mean(flights$arr_delay)
flights$arr_delay
summarize(flights)
filter(flights, max(mean(arr_delay)))
filter(flights, max(mean(flights$arr_delay)))
summary(flights$arr_delay)
filter(flights, arr_delay == max(arr_delay, na.rm = TRUE)))
filter(flights, arr_delay == max(arr_delay, na.rm = TRUE))
library(nycflights13)
library(dplyr)
flights <- mutate(flights, gain_in_air == arr_delay - dep_delay)
filter(flights, arr_delay == max(arr_delay, na.rm = TRUE))
filter(flights, arr_delay == max(mean(arr_delay), na.rm = TRUE))
mean(flights$arr_delay)
filter(flights, arr_delay == max(arr_delay, na.rm = TRUE))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("tidyr")
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome
install.packages("ggplot2")
library(ggplot2)
View(mpg)
View(mpg)
qplot(data = mpg, x = class)
qplot(data = mpg, x = hwy, bins = 15)
qplot(data = mpg, x = displ, y = hwy, color = cyl)
qplot(data = mpg, x = class)
qplot(data = mpg, x = hwy, bins = 15)
qplot(data = mpg, x = displ, y = hwy, color = cyl) + geom_smooth()
dataset <- read.csv("disability-income.csv", stringsAsFactors = FALSE)
setwd("~/GitBash/INFO201/info201group/data")
dataset <- read.csv("disability-income.csv", stringsAsFactors = FALSE)
df <- read.csv("disability-income.csv", stringsAsFactors = FALSE)
View(df)
dataset <- df %>% select(GEO, Income.group, Age.group, Sex, Disability)
library(dplyr)
dataset <- df %>% select(GEO, Income.group, Age.group, Sex, Disability)
View(dataset)
# Creates a new column storing the
typeOf(dataset$Income.group)
# Creates a new column storing the
typeof(dataset$Income.group)
# Removes the GEO values that are "Canada" so we can focus on each province
income_values <- dataset %>%
group_by(GEO) %>%
filter(GEO != "Canada")
only_provinces <- dataset %>%
group_by(GEO) %>%
filter(GEO != "Canada")
only_provinces
View(only_provinces)
# Removes the GEO values that are "Canada" so we can focus on each province
only_provinces <- dataset %>%
group_by(GEO) %>%
filter(GEO != "Canada") %>%
View(only_provinces)
View(only_provinces)
# Removes the GEO values that are "Canada" so we can focus on each province
only_provinces <- dataset %>%
group_by(GEO) %>%
filter(GEO != "Canada") %>%
filter(Income != "Total population, 15 years and over")
# Removes the GEO values that are "Canada" so we can focus on each province
only_provinces <- dataset %>%
group_by(GEO) %>%
filter(GEO != "Canada") %>%
filter(Income.group != "Total population, 15 years and over")
View(only_provinces)
filter_disability <- only_provinces %>%
filter(Disability != "Total population")
View(filter_disability)
